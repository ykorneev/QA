{
	"info": {
		"_postman_id": "87a5d9d9-ac3b-4826-a2cf-c10fdf53a457",
		"name": "Test collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19497099"
	},
	"item": [
		{
			"name": "Simple GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();",
							"var msg = data.msg;",
							"var txt = data.text;",
							"postman.setEnvironmentVariable(\"msg_Get\", msg);",
							"",
							"pm.test(\"message to be congrads\", function () {",
							"    pm.expect(msg).to.equal(\"Поздравляем! Вы успешно прошли задание!\");",
							"});",
							"",
							"pm.test(\"text to be custom\", function () {",
							"    pm.expect(txt).to.equal(\"We'll show how to use customer panel to manage and order subscriptions by end users. You can choose subscription from the list of services, tune needed resources for that subscription and purchase it. After purchase the subscription will be automatically provisioned.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followOriginalHttpMethod": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://demo1152609.mockable.io/users",
					"protocol": "http",
					"host": [
						"demo1152609",
						"mockable",
						"io"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post with token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();",
							"var msg = data.msg;",
							"postman.setEnvironmentVariable(\"msg_Post\", msg);",
							"",
							"pm.test(\"message to be cong\", function () {",
							"    pm.expect(msg).to.equal(\"Задание 2 успешно выполнено.\");",
							"});",
							"",
							"",
							"pm.test(\"post msg != get msg\", function () {",
							"   pm.expect(msg).not.equal(environment.msg_Get);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://demo1152609.mockable.io/create/user",
					"protocol": "http",
					"host": [
						"demo1152609",
						"mockable",
						"io"
					],
					"path": [
						"create",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Simple patch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();",
							"var msg = data.msg;",
							"var txt = data.text;",
							"",
							"pm.test(\"message error\", function () {",
							"    pm.expect(msg).to.equal(\"Ошибка при обновлении пользователя\");",
							"});",
							"",
							"pm.test(\"patch msg != post msg\", function () {",
							"   pm.expect(msg).not.equal(environment.msg_Post);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "http://demo1152609.mockable.io/update/user",
					"protocol": "http",
					"host": [
						"demo1152609",
						"mockable",
						"io"
					],
					"path": [
						"update",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete with token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "api-token",
						"value": "{{api-token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://demo1152609.mockable.io/delete/user",
					"protocol": "http",
					"host": [
						"demo1152609",
						"mockable",
						"io"
					],
					"path": [
						"delete",
						"user"
					]
				}
			},
			"response": []
		}
	]
}